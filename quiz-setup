"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Brain, ArrowLeft, Play, BookOpen, GraduationCap, Target } from "lucide-react"
import Link from "next/link"
import { useRouter } from "next/navigation"
import { LanguageToggle, useLanguage } from "@/components/language-toggle"

const translations = {
  en: {
    backButton: "Back",
    createQuiz: "Create Your Quiz",
    customizeExperience: "Customize your learning experience with AI-generated questions",
    quizConfiguration: "Quiz Configuration",
    setupParameters: "Set up your personalized quiz parameters below",
    topicQuestion: "What topic would you like to study?",
    topicPlaceholder: "Enter any topic (e.g., World War II, Calculus, React.js)",
    popularTopics: "Popular topics:",
    difficultyLevel: "Difficulty Level",
    chooseDifficulty: "Choose difficulty level",
    numQuestions: "Number of Questions",
    startQuiz: "Start Quiz",
    generatingQuiz: "Generating Quiz...",
    aiPoweredLearning: "AI-Powered Learning",
    aiDescription:
      "Our advanced AI will generate unique questions tailored to your topic and difficulty level, providing detailed explanations and feedback to enhance your learning experience.",
    popularTopicsList: [
      "Mathematics",
      "Science",
      "History",
      "Literature",
      "Geography",
      "Computer Science",
      "Physics",
      "Chemistry",
      "Biology",
      "Psychology",
    ],
    difficulties: {
      easy: { label: "Easy", description: "Basic concepts and fundamental knowledge" },
      medium: { label: "Medium", description: "Intermediate understanding required" },
      hard: { label: "Hard", description: "Advanced knowledge and critical thinking" },
    },
    questionCounts: {
      "3": "3 Questions (Quick)",
      "5": "5 Questions (Standard)",
      "10": "10 Questions (Comprehensive)",
      "15": "15 Questions (Extended)",
    },
    classLevel: "Class/Grade Level",
    chooseClass: "Choose your class/grade",
    classDescription: "Select your current class to get personalized quizzes aligned with your syllabus",
    classes: {
      "1": "Class 1 - Basic Learning",
      "2": "Class 2 - Foundation Skills",
      "3": "Class 3 - Elementary Level",
      "4": "Class 4 - Primary Education",
      "5": "Class 5 - Upper Primary",
      "6": "Class 6 - Middle School",
      "7": "Class 7 - Junior Secondary",
      "8": "Class 8 - Secondary Level",
      "9": "Class 9 - High School",
      "10": "Class 10 - Senior Secondary",
      "11": "Class 11 - Higher Secondary",
      "12": "Class 12 - Pre-University",
    },
  },
  hi: {
    backButton: "वापस",
    createQuiz: "अपनी क्विज़ बनाएं",
    customizeExperience: "AI-जनरेटेड प्रश्नों के साथ अपने सीखने के अनुभव को अनुकूलित करें",
    quizConfiguration: "क्विज़ कॉन्फ़िगरेशन",
    setupParameters: "नीचे अपने व्यक्तिगत क्विज़ पैरामीटर सेट करें",
    topicQuestion: "आप किस विषय का अध्ययन करना चाहते हैं?",
    topicPlaceholder: "कोई भी विषय दर्ज करें (जैसे, द्वितीय विश्व युद्ध, कैलकुलस, React.js)",
    popularTopics: "लोकप्रिय विषय:",
    difficultyLevel: "कठिनाई स्तर",
    chooseDifficulty: "कठिनाई स्तर चुनें",
    numQuestions: "प्रश्नों की संख्या",
    startQuiz: "क्विज़ शुरू करें",
    generatingQuiz: "क्विज़ बनाई जा रही है...",
    aiPoweredLearning: "AI-संचालित शिक्षा",
    aiDescription:
      "हमारा उन्नत AI आपके विषय और कठिनाई स्तर के अनुकूल अनूठे प्रश्न उत्पन्न करेगा, आपके सीखने के अनुभव को बढ़ाने के लिए विस्तृत स्पष्टीकरण और फीडबैक प्रदान करेगा।",
    popularTopicsList: [
      "गणित",
      "विज्ञान",
      "इतिहास",
      "साहित्य",
      "भूगोल",
      "कंप्यूटर विज्ञान",
      "भौतिकी",
      "रसायन विज्ञान",
      "जीव विज्ञान",
      "मनोविज्ञान",
    ],
    difficulties: {
      easy: { label: "आसान", description: "बुनियादी अवधारणाएं और मौलिक ज्ञान" },
      medium: { label: "मध्यम", description: "मध्यवर्ती समझ आवश्यक" },
      hard: { label: "कठिन", description: "उन्नत ज्ञान और आलोचनात्मक सोच" },
    },
    questionCounts: {
      "3": "3 प्रश्न (त्वरित)",
      "5": "5 प्रश्न (मानक)",
      "10": "10 प्रश्न (व्यापक)",
      "15": "15 प्रश्न (विस्तृत)",
    },
    classLevel: "कक्षा/ग्रेड स्तर",
    chooseClass: "अपनी कक्षा/ग्रेड चुनें",
    classDescription: "अपने पाठ्यक्रम के अनुकूल व्यक्तिगत क्विज़ प्राप्त करने के लिए अपनी वर्तमान कक्षा का चयन करें",
    classes: {
      "1": "कक्षा 1 - बुनियादी शिक्षा",
      "2": "कक्षा 2 - आधारभूत कौशल",
      "3": "कक्षा 3 - प्राथमिक स्तर",
      "4": "कक्षा 4 - प्राथमिक शिक्षा",
      "5": "कक्षा 5 - उच्च प्राथमिक",
      "6": "कक्षा 6 - मध्य विद्यालय",
      "7": "कक्षा 7 - जूनियर माध्यमिक",
      "8": "कक्षा 8 - माध्यमिक स्तर",
      "9": "कक्षा 9 - हाई स्कूल",
      "10": "कक्षा 10 - वरिष्ठ माध्यमिक",
      "11": "कक्षा 11 - उच्चतर माध्यमिक",
      "12": "कक्षा 12 - पूर्व-विश्वविद्यालय",
    },
  },
}

const difficultyLevels = [
  { value: "easy", icon: "🟢" },
  { value: "medium", icon: "🟡" },
  { value: "hard", icon: "🔴" },
]

export default function QuizSetupPage() {
  const [topic, setTopic] = useState("")
  const [difficulty, setDifficulty] = useState("")
  const [numQuestions, setNumQuestions] = useState("5")
  const [classLevel, setClassLevel] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const router = useRouter()

  const { language, changeLanguage } = useLanguage()
  const t = translations[language as keyof typeof translations]

  const handleStartQuiz = async () => {
    if (!topic || !difficulty || !classLevel) return

    setIsLoading(true)

    try {
      const response = await fetch("/api/generate-quiz", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          topic,
          difficulty,
          numQuestions: Number.parseInt(numQuestions),
          classLevel,
        }),
      })

      if (!response.ok) {
        throw new Error("Failed to generate quiz")
      }

      const quiz = await response.json()

      sessionStorage.setItem("currentQuiz", JSON.stringify(quiz))
      router.push("/quiz/take")
    } catch (error) {
      console.error("Error generating quiz:", error)
      alert("Failed to generate quiz. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-background">
      <header className="border-b border-border bg-card/50 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" asChild>
              <Link href="/">
                <ArrowLeft className="h-4 w-4 mr-2" />
                {t.backButton}
              </Link>
            </Button>
            <div className="flex items-center gap-2">
              <Brain className="h-6 w-6 text-primary" />
              <span className="font-semibold">Test-Me</span>
            </div>
          </div>
          <LanguageToggle currentLanguage={language} onLanguageChange={changeLanguage} />
        </div>
      </header>

      <div className="container mx-auto px-4 py-12 max-w-2xl">
        <div className="text-center mb-8">
          <h1 className="text-3xl md:text-4xl font-bold mb-4">{t.createQuiz}</h1>
          <p className="text-lg text-muted-foreground">{t.customizeExperience}</p>
        </div>

        <Card className="border-border/50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BookOpen className="h-5 w-5 text-primary" />
              {t.quizConfiguration}
            </CardTitle>
            <CardDescription>{t.setupParameters}</CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-3">
              <Label className="text-base font-medium flex items-center gap-2">
                <GraduationCap className="h-4 w-4" />
                {t.classLevel}
              </Label>
              <Select value={classLevel} onValueChange={setClassLevel}>
                <SelectTrigger className="text-base">
                  <SelectValue placeholder={t.chooseClass} />
                </SelectTrigger>
                <SelectContent>
                  {Object.entries(t.classes).map(([value, label]) => (
                    <SelectItem key={value} value={value}>
                      {label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <p className="text-sm text-muted-foreground">{t.classDescription}</p>
            </div>

            <div className="space-y-3">
              <Label htmlFor="topic" className="text-base font-medium">
                {t.topicQuestion}
              </Label>
              <Input
                id="topic"
                placeholder={t.topicPlaceholder}
                value={topic}
                onChange={(e) => setTopic(e.target.value)}
                className="text-base"
              />
              <div className="flex flex-wrap gap-2">
                <span className="text-sm text-muted-foreground">{t.popularTopics}</span>
                {t.popularTopicsList.map((popularTopic, index) => (
                  <Badge
                    key={popularTopic}
                    variant="outline"
                    className="cursor-pointer hover:bg-primary hover:text-primary-foreground transition-colors"
                    onClick={() => setTopic(popularTopic)}
                  >
                    {popularTopic}
                  </Badge>
                ))}
              </div>
            </div>

            <div className="space-y-3">
              <Label className="text-base font-medium flex items-center gap-2">
                <Target className="h-4 w-4" />
                {t.difficultyLevel}
              </Label>
              <Select value={difficulty} onValueChange={setDifficulty}>
                <SelectTrigger className="text-base">
                  <SelectValue placeholder={t.chooseDifficulty} />
                </SelectTrigger>
                <SelectContent>
                  {difficultyLevels.map((level) => (
                    <SelectItem key={level.value} value={level.value}>
                      <div className="flex items-center gap-3">
                        <span>{level.icon}</span>
                        <div>
                          <div className="font-medium">
                            {t.difficulties[level.value as keyof typeof t.difficulties].label}
                          </div>
                          <div className="text-sm text-muted-foreground">
                            {t.difficulties[level.value as keyof typeof t.difficulties].description}
                          </div>
                        </div>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-3">
              <Label htmlFor="numQuestions" className="text-base font-medium flex items-center gap-2">
                <GraduationCap className="h-4 w-4" />
                {t.numQuestions}
              </Label>
              <Select value={numQuestions} onValueChange={setNumQuestions}>
                <SelectTrigger className="text-base">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="3">{t.questionCounts["3"]}</SelectItem>
                  <SelectItem value="5">{t.questionCounts["5"]}</SelectItem>
                  <SelectItem value="10">{t.questionCounts["10"]}</SelectItem>
                  <SelectItem value="15">{t.questionCounts["15"]}</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="pt-4">
              <Button
                size="lg"
                className="w-full text-base"
                onClick={handleStartQuiz}
                disabled={!topic || !difficulty || !classLevel || isLoading}
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                    {t.generatingQuiz}
                  </>
                ) : (
                  <>
                    <Play className="mr-2 h-4 w-4" />
                    {t.startQuiz}
                  </>
                )}
              </Button>
            </div>
          </CardContent>
        </Card>

        <Card className="mt-6 border-primary/20 bg-primary/5">
          <CardContent className="pt-6">
            <div className="flex items-start gap-3">
              <Brain className="h-5 w-5 text-primary mt-0.5" />
              <div>
                <h3 className="font-medium text-primary mb-1">{t.aiPoweredLearning}</h3>
                <p className="text-sm text-muted-foreground">{t.aiDescription}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
