"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Brain, ArrowLeft, ArrowRight, Clock, CheckCircle, GraduationCap } from "lucide-react"
import Link from "next/link"
import { useRouter } from "next/navigation"

interface Question {
  id: number
  question: string
  options: string[]
  correctAnswer: number
  explanation: string
}

interface Quiz {
  topic: string
  difficulty: string
  questions: Question[]
}

export default function QuizTakePage() {
  const [quiz, setQuiz] = useState<Quiz | null>(null)
  const [classLevel, setClassLevel] = useState<string>("")
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState<{ [key: number]: number }>({})
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
  const [timeElapsed, setTimeElapsed] = useState(0)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const router = useRouter()

  useEffect(() => {
    // Load quiz from sessionStorage
    const storedQuiz = sessionStorage.getItem("currentQuiz")
    if (storedQuiz) {
      try {
        const parsedQuiz = JSON.parse(storedQuiz)
        if (
          parsedQuiz?.quiz?.questions &&
          Array.isArray(parsedQuiz.quiz.questions) &&
          parsedQuiz.quiz.questions.length > 0
        ) {
          setQuiz(parsedQuiz.quiz)
          setClassLevel(parsedQuiz.classLevel || "")
        } else {
          console.error("Invalid quiz data:", parsedQuiz)
          router.push("/quiz/setup")
        }
      } catch (error) {
        console.error("Error parsing stored quiz:", error)
        router.push("/quiz/setup")
      }
    } else {
      // Redirect to setup if no quiz found
      router.push("/quiz/setup")
    }
  }, [router])

  useEffect(() => {
    // Timer
    const timer = setInterval(() => {
      setTimeElapsed((prev) => prev + 1)
    }, 1000)

    return () => clearInterval(timer)
  }, [])

  useEffect(() => {
    // Load saved answer for current question
    setSelectedAnswer(answers[currentQuestion] ?? null)
  }, [currentQuestion, answers])

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, "0")}`
  }

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex)
  }

  const handleNext = () => {
    if (selectedAnswer !== null) {
      setAnswers((prev) => ({ ...prev, [currentQuestion]: selectedAnswer }))
    }

    if (currentQuestion < (quiz?.questions.length ?? 0) - 1) {
      setCurrentQuestion((prev) => prev + 1)
    }
  }

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion((prev) => prev - 1)
    }
  }

  const handleSubmitQuiz = async () => {
    if (!quiz) return

    // Save current answer
    const finalAnswers = selectedAnswer !== null ? { ...answers, [currentQuestion]: selectedAnswer } : answers

    setIsSubmitting(true)

    try {
      const storedQuizData = sessionStorage.getItem("currentQuiz")
      const quizData = storedQuizData ? JSON.parse(storedQuizData) : null

      const response = await fetch("/api/submit-quiz", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          sessionId: quizData?.sessionId,
          quiz: quizData?.quiz,
          answers: finalAnswers,
          topic: quizData?.quiz?.questions?.[0] ? quiz.topic : "Unknown",
          difficulty: quiz.difficulty,
          classLevel: quizData?.classLevel || classLevel,
        }),
      })

      if (!response.ok) {
        throw new Error("Failed to submit quiz")
      }

      const results = await response.json()

      // Store results and navigate to results page
      sessionStorage.setItem("quizResults", JSON.stringify(results))
      router.push("/quiz/results")
    } catch (error) {
      console.error("Error submitting quiz:", error)
      alert("Failed to submit quiz. Please try again.")
    } finally {
      setIsSubmitting(false)
    }
  }

  if (!quiz || !quiz.questions || quiz.questions.length === 0) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4" />
          <p className="text-muted-foreground">Loading quiz...</p>
        </div>
      </div>
    )
  }

  if (currentQuestion >= quiz.questions.length) {
    setCurrentQuestion(0)
    return null
  }

  const currentQ = quiz.questions[currentQuestion]
  if (!currentQ) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <p className="text-muted-foreground">Error loading question. Please try again.</p>
          <Button asChild className="mt-4">
            <Link href="/quiz/setup">Back to Setup</Link>
          </Button>
        </div>
      </div>
    )
  }

  const progress = ((currentQuestion + 1) / quiz.questions.length) * 100
  const isLastQuestion = currentQuestion === quiz.questions.length - 1
  const answeredQuestions = Object.keys(answers).length + (selectedAnswer !== null ? 1 : 0)

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button variant="ghost" size="sm" asChild>
                <Link href="/quiz/setup">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  Setup
                </Link>
              </Button>
              <div className="flex items-center gap-2">
                <Brain className="h-5 w-5 text-primary" />
                <span className="font-semibold">{quiz.topic}</span>
                <Badge variant="outline" className="capitalize">
                  {quiz.difficulty}
                </Badge>
                {classLevel && (
                  <Badge variant="secondary" className="flex items-center gap-1">
                    <GraduationCap className="h-3 w-3" />
                    Class {classLevel}
                  </Badge>
                )}
              </div>
            </div>

            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Clock className="h-4 w-4" />
                {formatTime(timeElapsed)}
              </div>
              <div className="text-sm text-muted-foreground">
                {currentQuestion + 1} of {quiz.questions.length}
              </div>
            </div>
          </div>

          <div className="mt-4">
            <Progress value={progress} className="h-2" />
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8 max-w-3xl">
        <Card className="border-border/50">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-xl">Question {currentQuestion + 1}</CardTitle>
              <Badge variant="secondary">
                <CheckCircle className="h-3 w-3 mr-1" />
                {answeredQuestions}/{quiz.questions.length} answered
              </Badge>
            </div>
            <CardDescription className="text-base leading-relaxed">{currentQ.question}</CardDescription>
          </CardHeader>
          <CardContent>
            <RadioGroup
              value={selectedAnswer !== null ? selectedAnswer.toString() : ""}
              onValueChange={(value) => handleAnswerSelect(Number.parseInt(value))}
              className="space-y-4"
            >
              {currentQ.options &&
                currentQ.options.map((option, index) => (
                  <div
                    key={index}
                    className="flex items-center space-x-3 p-4 rounded-lg border border-border hover:bg-muted/50 transition-colors"
                  >
                    <RadioGroupItem value={index.toString()} id={`option-${index}`} />
                    <Label htmlFor={`option-${index}`} className="flex-1 text-base cursor-pointer leading-relaxed">
                      {option}
                    </Label>
                  </div>
                ))}
            </RadioGroup>

            <div className="flex items-center justify-between mt-8 pt-6 border-t border-border">
              <Button variant="outline" onClick={handlePrevious} disabled={currentQuestion === 0}>
                <ArrowLeft className="h-4 w-4 mr-2" />
                Previous
              </Button>

              {isLastQuestion ? (
                <Button onClick={handleSubmitQuiz} disabled={isSubmitting} size="lg">
                  {isSubmitting ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                      Submitting...
                    </>
                  ) : (
                    <>
                      Submit Quiz
                      <CheckCircle className="h-4 w-4 ml-2" />
                    </>
                  )}
                </Button>
              ) : (
                <Button onClick={handleNext} disabled={selectedAnswer === null}>
                  Next
                  <ArrowRight className="h-4 w-4 ml-2" />
                </Button>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Progress Summary */}
        <Card className="mt-6 border-primary/20 bg-primary/5">
          <CardContent className="pt-6">
            <div className="flex items-center justify-between text-sm">
              <span className="text-muted-foreground">Progress</span>
              <span className="font-medium">{Math.round(progress)}% complete</span>
            </div>
            <div className="flex items-center justify-between text-sm mt-2">
              <span className="text-muted-foreground">Time elapsed</span>
              <span className="font-medium">{formatTime(timeElapsed)}</span>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
